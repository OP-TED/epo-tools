import{d as p,f as d,j as n,h as m}from"./index-DX66u4LQ.js";class e extends p.Readable{constructor(t,{baseIRI:s,compact:o,context:i={},encoding:c="object",flatten:h,frame:a,prettyPrint:l,skipContext:f}={}){super({objectMode:!0,read:()=>{}}),this.compact=o,this.context=i,this.encoding=c,this.flatten=h,this.frame=a,this.prettyPrint=l,this.skipContext=f,s&&(this.context["@base"]=s.value||s.toString()),t.on("prefix",(r,u)=>{this.context[r]||(this.context[r]=u.value)}),this.handleData(t)}async handleData(t){try{const s=(await d(t)).map(e.toJsonldQuad),o=await n.fromRDF(s),i=await this.transform(o,this.options);this.push(i),this.push(null)}catch(s){this.emit("error",s)}}async transform(t){return this.compact&&(t=await n.compact(t,this.context)),this.flatten&&(t=await n.flatten(t,this.context)),this.frame&&(t=await n.frame(t,this.context)),this.skipContext&&t["@context"]&&delete t["@context"],this.encoding==="string"?this.prettyPrint?JSON.stringify(t,null,2):JSON.stringify(t):t}static toJsonldQuad(t){return{subject:e.toJsonldTerm(t.subject),predicate:e.toJsonldTerm(t.predicate),object:e.toJsonldTerm(t.object),graph:e.toJsonldTerm(t.graph)}}static toJsonldTerm(t){return t.termType==="BlankNode"?{termType:"BlankNode",value:`_:${t.value}`}:t}}class y extends m{constructor(t){super(e,t)}}export{y as default};
