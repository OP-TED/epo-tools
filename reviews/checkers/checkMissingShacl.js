import { writeFileSync, mkdirSync } from 'fs'
import { INHERITANCE } from '../../src/conceptualModel/const.js'
import { inspectEdge, inspectNode } from '../../src/conceptualModel/issues.js'
import { toJson } from '../../src/epo/readEpo.js'
import { getRdfAssets } from '../../src/io/assets.js'
import { createTriplestore, doSelect } from '../../src/sparql/localStore.js'

async function checkMissingShacl ({
  model,
  targetDirectory,
}) {

  const sourceDirectory = model.localPath
  const globPattern = `${sourceDirectory}/implementation/*/shacl_shapes/**/*.ttl`
  const databasePath = model.databasePath
  const assets = await getRdfAssets({ globPattern })
  const store = createTriplestore({ assets })
  const rawJson = toJson({ databasePath })

  const hasErrors = x => x.some(x => x.severity === 'error')

  const { nodes, edges } = {
    nodes: rawJson.nodes.filter(x => !hasErrors(inspectNode(x))),
    edges: rawJson.edges.filter(x => !hasErrors(inspectEdge(x))).
      filter(x => x.type !== INHERITANCE),
  }

  function queryShapeForClass (clazz) {

    const query = `
PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX epo: <http://data.europa.eu/a4g/ontology#>
PREFIX epo-acc: <http://data.europa.eu/a4g/ontology#>
PREFIX epo-cat: <http://data.europa.eu/a4g/ontology#>
PREFIX epo-con: <http://data.europa.eu/a4g/ontology#>
PREFIX epo-ful: <http://data.europa.eu/a4g/ontology#>
PREFIX epo-not: <http://data.europa.eu/a4g/ontology#>
PREFIX epo-ord: <http://data.europa.eu/a4g/ontology#>
PREFIX epo-sub: <http://data.europa.eu/a4g/ontology#>
  
SELECT ?g ?shape ?source ?predicate ?datatypeTarget ?classTarget ?minCount ?maxCount {
  GRAPH ?g {
    BIND(${clazz} AS ?source)
    ?shape  sh:targetClass ?source ;
            sh:property  ?propertyShape .
    
    ?propertyShape a sh:PropertyShape ;
                   sh:path ?predicate .
                   
    OPTIONAL { ?propertyShape sh:minCount ?minCount } .
    OPTIONAL { ?propertyShape sh:maxCount ?maxCount } .
    OPTIONAL { ?propertyShape sh:datatype ?datatypeTarget } .
    OPTIONAL { ?propertyShape sh:class ?classTarget } .
  }
}
`

    return doSelect({ store, query })
  }

  function queryBoth (name) {
    const actual = queryShapeForClass(name).
      map(x => ({ target: x.datatypeTarget || x.classTarget, ...x }))
    const expected = edges.filter(x => x.source === name).
      filter(x => x.predicate !== 'rdfs:subClassOf')

    return { actual, expected }
  }

  function getSummary () {
    const result = []
    for (const { name } of nodes) {
      if (name.startsWith('epo')) {
        const { actual, expected } = queryBoth(name)
        result.push(
          {
            className: name,
            actual, expected,
          },
        )
      }
    }
    const withProblems = result.filter(x => x.actual.length < x.expected.length)
    console.log(result.length, 'classes inspected')
    console.log(withProblems.length,
      'Classes contain less properties than expected')
    const delta = result.reduce(
      (accumulator, x) => accumulator + x.expected.length - x.actual.length, 0)
    console.log('total', delta, 'properties missing')
    return result
  }

  const result = getSummary()

  const markdownRow = ({
    className,
    actual,
    expected,
  }) => `|${className}|${actual.length}|${expected.length}|${actual.length !==
  expected.length ? 'X' : ''}`

  const summary = `
# Missing SHACL properties

The following is a comparison between the SHACL properties generated by Model2Owl with the properties expressed in the eAP (Enterprise architect) file.

## Model

\`\`\`json
${JSON.stringify(model, null, 2)}
\`\`\`

## Files

- ${assets.map(x => x.path).join('\n- ')}

## SHACL - Property shapes per class

- Model2Owl: Number of property shapes produced from XMI with Model2Owl 
- EAP: Number of property shapes produced directly from the EAP file
- [details.json](./details.json)

| Class | Model2Owl | EAP | Mismatch |
|-------|--------|----------|--------|
${result.map(markdownRow).join('\n')}

[source](./checkMissingExports.js) ${new Date().toISOString()}
`

  mkdirSync(targetDirectory, { recursive: true })
  writeFileSync(`${targetDirectory}/details.json`,
    JSON.stringify(result, null, 2))
  writeFileSync(`${targetDirectory}/missingPropsSummaryCounts.md`, summary)

}

export default checkMissingShacl
